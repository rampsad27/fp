{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saina\\\\Documents\\\\fp-detection\\\\src\\\\ChatApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Markdown from 'markdown-to-jsx'; // Assuming you use a library for Markdown rendering\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = 'AIzaSyDYZzLdmRGK0Ev7az3u4csgs1jnb5tTZF8'; //api key\nconst genAI = new GoogleGenerativeAI(apiKey);\nconst model = genAI.getGenerativeModel({\n  model: \"gemini-1.5-flash\"\n});\nconst ChatApp = () => {\n  _s();\n  const [chatSession, setChatSession] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const [userMessage, setUserMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messageScrollRef = useRef(null);\n  useEffect(() => {\n    const initChat = async () => {\n      // Initialize chat session (if needed)\n      // This can be adapted based on your specific use case with the Google Generative AI\n      setChatSession({\n        history: []\n      }); // Placeholder for chat session initialization\n    };\n    initChat();\n  }, []);\n  const scrollToBottom = () => {\n    messageScrollRef.current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const sendMessage = async () => {\n    setIsLoading(true);\n    try {\n      // Send user message to the AI model\n      const result = await model.generateContent(userMessage);\n      const response = await result.response;\n      const aiMessage = response.text();\n\n      // Update messages with user and AI messages\n      setMessages([...messages, {\n        role: 'user',\n        text: userMessage\n      }]);\n      setMessages([...messages, {\n        role: 'gemini',\n        text: aiMessage\n      }]);\n    } catch (error) {\n      displayError(error.toString());\n    } finally {\n      setIsLoading(false);\n      setUserMessage('');\n      scrollToBottom();\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !isLoading) {\n      sendMessage();\n    }\n  };\n  const displayError = message => {\n    alert(message); // Replace with more sophisticated error handling\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-list\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.role}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-role\",\n          children: message.role === 'user' ? 'User:' : 'Gemini:'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Markdown, {\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messageScrollRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your prompt\",\n        value: userMessage,\n        onChange: e => setUserMessage(e.target.value),\n        onKeyPress: handleKeyPress,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        disabled: isLoading,\n        children: isLoading ? 'Sending...' : 'Send'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatApp, \"xD0NIMnu423n6etphwJJ0eIJXAU=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Markdown","GoogleGenerativeAI","jsxDEV","_jsxDEV","apiKey","genAI","model","getGenerativeModel","ChatApp","_s","chatSession","setChatSession","messages","setMessages","userMessage","setUserMessage","isLoading","setIsLoading","messageScrollRef","initChat","history","scrollToBottom","current","scrollIntoView","behavior","sendMessage","result","generateContent","response","aiMessage","text","role","error","displayError","toString","handleKeyPress","e","key","message","alert","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","placeholder","value","onChange","target","onKeyPress","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/saina/Documents/fp-detection/src/ChatApp.js"],"sourcesContent":["\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport Markdown from 'markdown-to-jsx'; // Assuming you use a library for Markdown rendering\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nconst apiKey = 'AIzaSyDYZzLdmRGK0Ev7az3u4csgs1jnb5tTZF8'; //api key\r\nconst genAI = new GoogleGenerativeAI(apiKey);\r\nconst model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n\r\nconst ChatApp = () => {\r\n  const [chatSession, setChatSession] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [userMessage, setUserMessage] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const messageScrollRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const initChat = async () => {\r\n      // Initialize chat session (if needed)\r\n      // This can be adapted based on your specific use case with the Google Generative AI\r\n      setChatSession({ history: [] }); // Placeholder for chat session initialization\r\n    };\r\n    initChat();\r\n  }, []);\r\n\r\n  const scrollToBottom = () => {\r\n    messageScrollRef.current.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Send user message to the AI model\r\n      const result = await model.generateContent(userMessage);\r\n      const response = await result.response;\r\n      const aiMessage = response.text();\r\n\r\n      // Update messages with user and AI messages\r\n      setMessages([...messages, { role: 'user', text: userMessage }]);\r\n      setMessages([...messages, { role: 'gemini', text: aiMessage }]);\r\n    } catch (error) {\r\n      displayError(error.toString());\r\n    } finally {\r\n      setIsLoading(false);\r\n      setUserMessage('');\r\n      scrollToBottom();\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !isLoading) {\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  const displayError = (message) => {\r\n    alert(message); // Replace with more sophisticated error handling\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"message-list\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.role}`}>\r\n            <span className=\"message-role\">{message.role === 'user' ? 'User:' : 'Gemini:'}</span>\r\n            <Markdown>{message.text}</Markdown>\r\n          </div>\r\n        ))}\r\n        <div ref={messageScrollRef} />\r\n      </div>\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter your prompt\"\r\n          value={userMessage}\r\n          onChange={(e) => setUserMessage(e.target.value)}\r\n          onKeyPress={handleKeyPress}\r\n          disabled={isLoading}\r\n        />\r\n        <button onClick={sendMessage} disabled={isLoading}>\r\n          {isLoading ? 'Sending...' : 'Send'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatApp;\r\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,QAAQ,MAAM,iBAAiB,CAAC,CAAC;AACxC,SAASC,kBAAkB,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,MAAM,GAAG,yCAAyC,CAAC,CAAC;AAC1D,MAAMC,KAAK,GAAG,IAAIJ,kBAAkB,CAACG,MAAM,CAAC;AAC5C,MAAME,KAAK,GAAGD,KAAK,CAACE,kBAAkB,CAAC;EAAED,KAAK,EAAE;AAAmB,CAAC,CAAC;AAErE,MAAME,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMqB,gBAAgB,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAErCD,SAAS,CAAC,MAAM;IACd,MAAMqB,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B;MACA;MACAR,cAAc,CAAC;QAAES,OAAO,EAAE;MAAG,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC;IACDD,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,cAAc,GAAGA,CAAA,KAAM;IAC3BH,gBAAgB,CAACI,OAAO,CAACC,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EACjE,CAAC;EAED,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9BR,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF;MACA,MAAMS,MAAM,GAAG,MAAMpB,KAAK,CAACqB,eAAe,CAACb,WAAW,CAAC;MACvD,MAAMc,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;MACtC,MAAMC,SAAS,GAAGD,QAAQ,CAACE,IAAI,CAAC,CAAC;;MAEjC;MACAjB,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;QAAEmB,IAAI,EAAE,MAAM;QAAED,IAAI,EAAEhB;MAAY,CAAC,CAAC,CAAC;MAC/DD,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;QAAEmB,IAAI,EAAE,QAAQ;QAAED,IAAI,EAAED;MAAU,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,YAAY,CAACD,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC;IAChC,CAAC,SAAS;MACRjB,YAAY,CAAC,KAAK,CAAC;MACnBF,cAAc,CAAC,EAAE,CAAC;MAClBM,cAAc,CAAC,CAAC;IAClB;EACF,CAAC;EAED,MAAMc,cAAc,GAAIC,CAAC,IAAK;IAC5B,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,IAAI,CAACrB,SAAS,EAAE;MACnCS,WAAW,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAMQ,YAAY,GAAIK,OAAO,IAAK;IAChCC,KAAK,CAACD,OAAO,CAAC,CAAC,CAAC;EAClB,CAAC;EAED,oBACEnC,OAAA;IAAKqC,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BtC,OAAA;MAAKqC,SAAS,EAAC,cAAc;MAAAC,QAAA,GAC1B7B,QAAQ,CAAC8B,GAAG,CAAC,CAACJ,OAAO,EAAEK,KAAK,kBAC3BxC,OAAA;QAAiBqC,SAAS,EAAE,WAAWF,OAAO,CAACP,IAAI,EAAG;QAAAU,QAAA,gBACpDtC,OAAA;UAAMqC,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAEH,OAAO,CAACP,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG;QAAS;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrF5C,OAAA,CAACH,QAAQ;UAAAyC,QAAA,EAAEH,OAAO,CAACR;QAAI;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAW,CAAC;MAAA,GAF3BJ,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGV,CACN,CAAC,eACF5C,OAAA;QAAK6C,GAAG,EAAE9B;MAAiB;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eACN5C,OAAA;MAAKqC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BtC,OAAA;QACE8C,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,mBAAmB;QAC/BC,KAAK,EAAErC,WAAY;QACnBsC,QAAQ,EAAGhB,CAAC,IAAKrB,cAAc,CAACqB,CAAC,CAACiB,MAAM,CAACF,KAAK,CAAE;QAChDG,UAAU,EAAEnB,cAAe;QAC3BoB,QAAQ,EAAEvC;MAAU;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC,eACF5C,OAAA;QAAQqD,OAAO,EAAE/B,WAAY;QAAC8B,QAAQ,EAAEvC,SAAU;QAAAyB,QAAA,EAC/CzB,SAAS,GAAG,YAAY,GAAG;MAAM;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtC,EAAA,CA5EID,OAAO;AAAAiD,EAAA,GAAPjD,OAAO;AA8Eb,eAAeA,OAAO;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}